/***************************************************************

							EFFECT PARSER

			1.Parse shader organization of each pass/technique
			from the token list generated by IEffectTokenizer

***********************************************************/
#pragma once

namespace NoiseEffectCompiler
{



		class IEffectParser
		{
		public:

			IEffectParser();

			bool Parse(std::vector<N_TokenInfo>&& tokenList, IEffect* pEffect);//parse Effect (many techiniques)

			void GetHLSLFileList(std::vector<std::string>& outFileList);

			void GetCompilationPlan(std::vector<N_SHADER_DESC>& outUniqueShaderList);//shaders that need compiling

		private:

			enum NOISE_SHADER_TYPE
			{
				NOISE_SHADER_TYPE_VS = 1,
				NOISE_SHADER_TYPE_PS = 2,
				NOISE_SHADER_TYPE_GS = 3,
			};

			UINT mTokenIndex;

			bool mFunction_ParseIncludeInstruction();

			bool mFunction_ParseTechnique();

			bool mFunction_ParsePass(ITechnique* pFatherTechnique);

			bool mFunction_ParseShaderConfig(IPass* pFatherPass, NOISE_SHADER_TYPE st);

			bool mFunction_MatchCurrentToken(TOKEN_TYPE type);

			bool	mFunction_MatchCurrentToken(TOKEN_TYPE type, const std::string& content);

			void mFunction_ReportError(const std::string& msg);

			std::vector<N_TokenInfo> mTokenList;//in

			std::vector<std::string> mSourceFileList;//out

			std::unordered_map<std::string,N_SHADER_DESC> mUniqueShaderTable;//out

			IEffect* m_pEffect;
		};
}