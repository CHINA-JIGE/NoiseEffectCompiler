/***************************************************************

							EFFECT PARSER

			1.Parse shader organization of each pass/technique
			from the token list generated by IEffectTokenizer

***********************************************************/
#pragma once


namespace NoiseEffectCompiler
{

		struct IShader
		{
			std::string entryPoint;
			std::string version;
		};

		class IPass
		{
		public:

			void SetVS(IShader shader);

			void SetGS(IShader shader);

			void SetPS(IShader shader);

			void GetVS(IShader& outShader);

			void GetGS(IShader& outShader);

			void GetPS(IShader& outShader);

		private:

			IShader mVS;
			IShader mGS;
			IShader mPS;

		};


		class ITechnique : public IFactory<IPass>
		{
		public:

			//theoretically, pass count won't be limited,
			//but too many pass could cause performance overhead
			ITechnique() :IFactory<IPass>(32) {};

		private:
		};


		class IEffect : public IFactory<ITechnique>
		{
		public:

			//Root interface of Effect Framework, owns Technique child object
			//for a specific render effect
			IEffect() :IFactory<ITechnique>(100000) {};

		private:

		};


		class IEffectParser
		{
		public:

			IEffectParser();

			bool Parse(const std::vector<N_TokenInfo>& list);//step 2

		private:

			std::unordered_map<std::string, std::string> mUniqueShaderEntryPointHashTable;//shader name

			IEffect		mEffect;//one file for one Effect

		};
}