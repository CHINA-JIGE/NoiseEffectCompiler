//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.17672
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   struct N_DirectionalLight
//   {
//       
//       float3 mAmbientColor;          // Offset:    0
//       float mSpecularIntensity;      // Offset:   12
//       float3 mDiffuseColor;          // Offset:   16
//       float mDiffuseIntensity;       // Offset:   28
//       float3 mSpecularColor;         // Offset:   32
//       float mPad2;                   // Offset:   44
//       float3 mDirection;             // Offset:   48
//       float mPad3;                   // Offset:   60
//
//   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
//   
//   struct N_PointLight
//   {
//       
//       float3 mAmbientColor;          // Offset:  640
//       float mSpecularIntensity;      // Offset:  652
//       float3 mDiffuseColor;          // Offset:  656
//       float mDiffuseIntensity;       // Offset:  668
//       float3 mSpecularColor;         // Offset:  672
//       float mAttenuationFactor;      // Offset:  684
//       float3 mPosition;              // Offset:  688
//       float mLightingRange;          // Offset:  700
//
//   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
//   
//   struct N_SpotLight
//   {
//       
//       float3 mAmbientColor;          // Offset: 1280
//       float mSpecularIntensity;      // Offset: 1292
//       float3 mDiffuseColor;          // Offset: 1296
//       float mDiffuseIntensity;       // Offset: 1308
//       float3 mSpecularColor;         // Offset: 1312
//       float mAttenuationFactor;      // Offset: 1324
//       float3 mLitAt;                 // Offset: 1328
//       float mLightingAngle;          // Offset: 1340
//       float3 mPosition;              // Offset: 1344
//       float mLightingRange;          // Offset: 1356
//
//   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
//   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
//   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
//   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
//   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
//   float3 gCamPos;                    // Offset: 2096 Size:    12
//   float mPad1;                       // Offset: 2108 Size:     4 [unused]
//
// }
//
// cbuffer cbPerSubset
// {
//
//   struct N_Material_Basic
//   {
//       
//       float3 mAmbientColor;          // Offset:    0
//       int mSpecularSmoothLevel;      // Offset:   12
//       float3 mDiffuseColor;          // Offset:   16
//       float mNormalMapBumpIntensity; // Offset:   28
//       float3 mSpecularColor;         // Offset:   32
//       float mEnvironmentMapTransparency;// Offset:   44
//
//   } gMaterial;                       // Offset:    0 Size:    48
//   int gIsDiffuseMapValid;            // Offset:   48 Size:     4 [unused]
//   int gIsNormalMapValid;             // Offset:   52 Size:     4 [unused]
//   int gIsSpecularMapValid;           // Offset:   56 Size:     4 [unused]
//   int gIsEnvironmentMapVaild;        // Offset:   60 Size:     4 [unused]
//
// }
//
// cbuffer cbRarely
// {
//
//   struct N_DirectionalLight
//   {
//       
//       float3 mAmbientColor;          // Offset:    0
//       float mSpecularIntensity;      // Offset:   12
//       float3 mDiffuseColor;          // Offset:   16
//       float mDiffuseIntensity;       // Offset:   28
//       float3 mSpecularColor;         // Offset:   32
//       float mPad2;                   // Offset:   44
//       float3 mDirection;             // Offset:   48
//       float mPad3;                   // Offset:   60
//
//   } gDirectionalLight_Static[50];    // Offset:    0 Size:  3200
//   
//   struct N_PointLight
//   {
//       
//       float3 mAmbientColor;          // Offset: 3200
//       float mSpecularIntensity;      // Offset: 3212
//       float3 mDiffuseColor;          // Offset: 3216
//       float mDiffuseIntensity;       // Offset: 3228
//       float3 mSpecularColor;         // Offset: 3232
//       float mAttenuationFactor;      // Offset: 3244
//       float3 mPosition;              // Offset: 3248
//       float mLightingRange;          // Offset: 3260
//
//   } gPointLight_Static[50];          // Offset: 3200 Size:  3200
//   
//   struct N_SpotLight
//   {
//       
//       float3 mAmbientColor;          // Offset: 6400
//       float mSpecularIntensity;      // Offset: 6412
//       float3 mDiffuseColor;          // Offset: 6416
//       float mDiffuseIntensity;       // Offset: 6428
//       float3 mSpecularColor;         // Offset: 6432
//       float mAttenuationFactor;      // Offset: 6444
//       float3 mLitAt;                 // Offset: 6448
//       float mLightingAngle;          // Offset: 6460
//       float3 mPosition;              // Offset: 6464
//       float mLightingRange;          // Offset: 6476
//
//   } gSpotLight_Static[50];           // Offset: 6400 Size:  4000
//   int gDirectionalLightCount_Static; // Offset: 10400 Size:     4
//   int gPointLightCount_Static;       // Offset: 10404 Size:     4
//   int gSpotLightCount_Static;        // Offset: 10408 Size:     4
//   int gIsLightingEnabled_Static;     // Offset: 10412 Size:     4
//
// }
//
// cbuffer cbAtmosphere
// {
//
//   float3 gFogColor3;                 // Offset:    0 Size:    12
//   int gFogEnabled;                   // Offset:   12 Size:     4
//   float gFogNear;                    // Offset:   16 Size:     4
//   float gFogFar;                     // Offset:   20 Size:     4
//   int gIsSkyDomeValid;               // Offset:   24 Size:     4 [unused]
//   int gIsSkyBoxValid;                // Offset:   28 Size:     4 [unused]
//   float gSkyBoxWidth;                // Offset:   32 Size:     4 [unused]
//   float gSkyBoxHeight;               // Offset:   36 Size:     4 [unused]
//   float gSkyBoxDepth;                // Offset:   40 Size:     4 [unused]
//   float mPad3;                       // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbPerFrame                        cbuffer      NA          NA    0        1
// cbPerSubset                       cbuffer      NA          NA    1        1
// cbRarely                          cbuffer      NA          NA    2        1
// cbAtmosphere                      cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// POSITION                 0   xyz         2     NONE   float   xyz 
// NORMAL                   0   xyz         3     NONE   float   xyz 
// TEXCOORD                 0   xy          4     NONE   float       
// TANGENT                  0   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[132], dynamicIndexed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb2[651], dynamicIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 13
ieq r0.x, cb0[130].w, l(0)
ieq r0.y, cb2[650].w, l(0)
and r0.x, r0.y, r0.x
if_nz r0.x
  mov o0.xyzw, v1.xyzw
  ret 
endif 
add r0.xyz, -v2.xyzx, cb0[131].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r0.w, r0.w
ieq r1.x, cb3[0].w, l(1)
lt r1.y, cb3[1].y, r0.w
and r1.x, r1.y, r1.x
if_nz r1.x
  mov o0.xyz, cb3[0].xyzx
  mov o0.w, l(1.000000)
  ret 
endif 
dp3 r1.x, v3.xyzx, v3.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v3.xyzx
if_nz cb0[130].w
  dp3 r1.w, r1.xyzx, v5.xyzx
  mad r2.xyz, -r1.wwww, r1.xyzx, v5.xyzx
  dp3 r1.w, r2.xyzx, r2.xyzx
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, r2.xyzx
  mul r3.xyz, r1.zxyz, r2.yzxy
  mad r3.xyz, r1.yzxy, r2.zxyz, -r3.xyzx
  dp3 r1.w, r3.xyzx, r3.xyzx
  rsq r1.w, r1.w
  mul r3.xyz, r1.wwww, r3.xyzx
  dp3 r4.x, r0.xyzx, r2.xyzx
  dp3 r4.y, r0.xyzx, r1.xyzx
  dp3 r4.z, r0.xyzx, r3.xyzx
  itof r1.w, cb1[0].w
  dp3 r2.w, r4.xyzx, r4.xyzx
  rsq r2.w, r2.w
  mul r4.xyz, r2.wwww, r4.xyzx
  mov r5.w, l(1.000000)
  mov r6.w, l(1.000000)
  mov r7.xyzw, l(0,0,0,0)
  mov r2.w, l(0)
  loop 
    ige r3.w, r2.w, cb0[130].x
    breakc_nz r3.w
    ishl r3.w, r2.w, l(2)
    dp3 r4.w, cb0[r3.w + 3].xyzx, cb0[r3.w + 3].xyzx
    rsq r4.w, r4.w
    mul r8.xyz, r4.wwww, cb0[r3.w + 3].xyzx
    dp3 r9.x, r8.xyzx, r2.xyzx
    dp3 r9.y, r8.xyzx, r1.xyzx
    dp3 r9.z, r8.xyzx, r3.xyzx
    mul r4.w, -r9.y, cb0[r3.w + 1].w
    mul r8.xyz, cb1[0].xyzx, cb0[r3.w + 0].xyzx
    lt r8.w, l(0.000000), r4.w
    mul r10.xyz, cb1[1].xyzx, cb0[r3.w + 1].xyzx
    mul r10.xyz, r4.wwww, r10.xyzx
    mad r9.xyz, r9.yyyy, l(-0.000000, -2.000000, -0.000000, 0.000000), r9.xyzx
    dp3 r4.w, r9.xyzx, r4.xyzx
    max r4.w, r4.w, l(0.000000)
    log r4.w, r4.w
    mul r4.w, r1.w, r4.w
    exp r4.w, r4.w
    mul r4.w, r4.w, cb0[r3.w + 0].w
    mul r5.xyz, cb1[2].xyzx, cb0[r3.w + 2].xyzx
    mul r9.xyzw, r5.xyzw, r4.wwww
    movc r9.xyzw, r8.wwww, r9.xyzw, l(0,0,0,1.000000)
    and r5.xyz, r8.wwww, r10.xyzx
    mad r8.xyz, r8.xyzx, cb1[1].xyzx, r5.xyzx
    mov r8.w, r7.w
    add r8.xyzw, r9.xyzw, r8.xyzw
    mov r6.xyz, r7.xyzx
    add r7.xyzw, r6.xyzw, r8.xyzw
    iadd r2.w, r2.w, l(1)
  endloop 
  mov r5.w, l(1.000000)
  mov r6.w, l(1.000000)
  mov r8.xyzw, r7.xyzw
  mov r2.w, l(0)
  loop 
    ige r3.w, r2.w, cb0[130].y
    breakc_nz r3.w
    ishl r3.w, r2.w, l(2)
    add r9.xyz, v2.xyzx, -cb0[r3.w + 43].xyzx
    dp3 r4.w, r9.xyzx, r9.xyzx
    sqrt r9.w, r4.w
    ge r9.w, cb0[r3.w + 43].w, r9.w
    if_nz r9.w
      rsq r9.w, r4.w
      mul r9.xyz, r9.wwww, r9.xyzx
      mad r4.w, r4.w, cb0[r3.w + 42].w, l(1.000000)
      div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
      dp3 r10.x, r9.xyzx, r2.xyzx
      dp3 r10.y, r9.xyzx, r1.xyzx
      dp3 r10.z, r9.xyzx, r3.xyzx
      dp3 r9.x, -r9.xyzx, r1.xyzx
      mul r9.x, r9.x, cb0[r3.w + 41].w
      mul r9.yzw, cb1[0].xxyz, cb0[r3.w + 40].xxyz
      lt r10.w, l(0.000000), r9.x
      mul r9.x, r4.w, r9.x
      mul r11.xyz, cb1[1].xyzx, cb0[r3.w + 41].xyzx
      mul r11.xyz, r9.xxxx, r11.xyzx
      mad r10.xyz, r10.yyyy, l(-0.000000, -2.000000, -0.000000, 0.000000), r10.xyzx
      dp3 r9.x, r10.xyzx, r4.xyzx
      max r9.x, r9.x, l(0.000000)
      log r9.x, r9.x
      mul r9.x, r1.w, r9.x
      exp r9.x, r9.x
      mul r9.x, r9.x, cb0[r3.w + 40].w
      mul r4.w, r4.w, r9.x
      mul r5.xyz, cb1[2].xyzx, cb0[r3.w + 42].xyzx
      mul r12.xyzw, r5.xyzw, r4.wwww
      movc r12.xyzw, r10.wwww, r12.xyzw, l(0,0,0,1.000000)
      and r5.xyz, r10.wwww, r11.xyzx
      mad r6.xyz, r9.yzwy, cb1[1].xyzx, r5.xyzx
      add r9.xyzw, r6.xyzw, r12.xyzw
    else 
      mov r9.xyzw, l(0,0,0,1.000000)
    endif 
    add r8.xyzw, r8.xyzw, r9.xyzw
    iadd r2.w, r2.w, l(1)
  endloop 
  mov r2.w, l(1.000000)
  mov r3.w, l(1.000000)
  mov r5.xyzw, r8.xyzw
  mov r4.w, l(0)
  loop 
    ige r6.x, r4.w, cb0[130].z
    breakc_nz r6.x
    imul null, r6.x, r4.w, l(5)
    add r6.yzw, v2.xxyz, -cb0[r6.x + 84].xxyz
    dp3 r7.x, r6.yzwy, r6.yzwy
    rsq r7.y, r7.x
    mul r6.yzw, r6.yyzw, r7.yyyy
    sqrt r7.y, r7.x
    add r9.xyz, cb0[r6.x + 83].xyzx, -cb0[r6.x + 84].xyzx
    dp3 r7.z, r9.xyzx, r9.xyzx
    rsq r7.z, r7.z
    mul r9.xyz, r7.zzzz, r9.xyzx
    dp3 r7.z, r6.yzwy, r9.xyzx
    lt r7.y, cb0[r6.x + 84].w, r7.y
    mul r7.w, l(0.500000), cb0[r6.x + 83].w
    sincos null, r7.w, r7.w
    lt r7.z, r7.z, r7.w
    or r7.y, r7.z, r7.y
    if_z r7.y
      mad r7.x, r7.x, cb0[r6.x + 82].w, l(1.000000)
      div r7.x, l(1.000000, 1.000000, 1.000000, 1.000000), r7.x
      dp3 r7.y, -r6.yzwy, r1.xyzx
      mul r7.y, r7.y, cb0[r6.x + 81].w
      mul r9.xyz, cb1[0].xyzx, cb0[r6.x + 80].xyzx
      lt r7.z, l(0.000000), r7.y
      mul r7.y, r7.y, r7.x
      mul r10.xyz, cb1[1].xyzx, cb0[r6.x + 81].xyzx
      mul r10.xyz, r7.yyyy, r10.xyzx
      mad r6.yzw, r6.zzzz, l(0.000000, -0.000000, -2.000000, -0.000000), r6.yyzw
      dp3 r6.y, r6.yzwy, r4.xyzx
      max r6.y, r6.y, l(0.000000)
      log r6.y, r6.y
      mul r6.y, r1.w, r6.y
      exp r6.y, r6.y
      mul r6.y, r6.y, cb0[r6.x + 80].w
      mul r6.y, r6.y, r7.x
      mul r2.xyz, cb1[2].xyzx, cb0[r6.x + 82].xyzx
      mul r6.xyzw, r2.xyzw, r6.yyyy
      movc r6.xyzw, r7.zzzz, r6.xyzw, l(0,0,0,1.000000)
      and r2.xyz, r7.zzzz, r10.xyzx
      mad r3.xyz, r9.xyzx, cb1[1].xyzx, r2.xyzx
      add r6.xyzw, r3.xyzw, r6.xyzw
    else 
      mov r6.xyzw, l(0,0,0,1.000000)
    endif 
    add r5.xyzw, r5.xyzw, r6.xyzw
    iadd r4.w, r4.w, l(1)
  endloop 
else 
  mov r5.xyzw, l(0,0,0,0)
endif 
if_nz cb2[650].w
  dp3 r1.w, r1.xyzx, v5.xyzx
  mad r2.xyz, -r1.wwww, r1.xyzx, v5.xyzx
  dp3 r1.w, r2.xyzx, r2.xyzx
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, r2.xyzx
  mul r3.xyz, r1.zxyz, r2.yzxy
  mad r3.xyz, r1.yzxy, r2.zxyz, -r3.xyzx
  dp3 r1.w, r3.xyzx, r3.xyzx
  rsq r1.w, r1.w
  mul r3.xyz, r1.wwww, r3.xyzx
  dp3 r4.x, r0.xyzx, r2.xyzx
  dp3 r4.y, r0.xyzx, r1.xyzx
  dp3 r4.z, r0.xyzx, r3.xyzx
  itof r0.x, cb1[0].w
  dp3 r0.y, r4.xyzx, r4.xyzx
  rsq r0.y, r0.y
  mul r4.xyz, r0.yyyy, r4.xyzx
  mov r6.w, l(1.000000)
  mov r7.w, l(1.000000)
  mov r8.xyzw, r5.xyzw
  mov r0.y, l(0)
  loop 
    ige r0.z, r0.y, cb2[650].x
    breakc_nz r0.z
    ishl r0.z, r0.y, l(2)
    dp3 r1.w, cb2[r0.z + 3].xyzx, cb2[r0.z + 3].xyzx
    rsq r1.w, r1.w
    mul r9.xyz, r1.wwww, cb2[r0.z + 3].xyzx
    dp3 r10.x, r9.xyzx, r2.xyzx
    dp3 r10.y, r9.xyzx, r1.xyzx
    dp3 r10.z, r9.xyzx, r3.xyzx
    mul r1.w, -r10.y, cb2[r0.z + 1].w
    mul r9.xyz, cb1[0].xyzx, cb2[r0.z + 0].xyzx
    lt r2.w, l(0.000000), r1.w
    mul r11.xyz, cb1[1].xyzx, cb2[r0.z + 1].xyzx
    mul r11.xyz, r1.wwww, r11.xyzx
    mad r10.xyz, r10.yyyy, l(-0.000000, -2.000000, -0.000000, 0.000000), r10.xyzx
    dp3 r1.w, r10.xyzx, r4.xyzx
    max r1.w, r1.w, l(0.000000)
    log r1.w, r1.w
    mul r1.w, r0.x, r1.w
    exp r1.w, r1.w
    mul r1.w, r1.w, cb2[r0.z + 0].w
    mul r6.xyz, cb1[2].xyzx, cb2[r0.z + 2].xyzx
    mul r10.xyzw, r6.xyzw, r1.wwww
    movc r10.xyzw, r2.wwww, r10.xyzw, l(0,0,0,1.000000)
    and r6.xyz, r2.wwww, r11.xyzx
    mad r9.xyz, r9.xyzx, cb1[1].xyzx, r6.xyzx
    mov r9.w, r8.w
    add r9.xyzw, r10.xyzw, r9.xyzw
    mov r7.xyz, r8.xyzx
    add r8.xyzw, r7.xyzw, r9.xyzw
    iadd r0.y, r0.y, l(1)
  endloop 
  mov r6.w, l(1.000000)
  mov r7.w, l(1.000000)
  mov r9.xyzw, r8.xyzw
  mov r0.y, l(0)
  loop 
    ige r0.z, r0.y, cb2[650].y
    breakc_nz r0.z
    ishl r0.z, r0.y, l(2)
    add r10.xyz, v2.xyzx, -cb2[r0.z + 203].xyzx
    dp3 r1.w, r10.xyzx, r10.xyzx
    sqrt r2.w, r1.w
    ge r2.w, cb2[r0.z + 203].w, r2.w
    if_nz r2.w
      rsq r2.w, r1.w
      mul r10.xyz, r2.wwww, r10.xyzx
      mad r1.w, r1.w, cb2[r0.z + 202].w, l(1.000000)
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
      dp3 r11.x, r10.xyzx, r2.xyzx
      dp3 r11.y, r10.xyzx, r1.xyzx
      dp3 r11.z, r10.xyzx, r3.xyzx
      dp3 r2.w, -r10.xyzx, r1.xyzx
      mul r2.w, r2.w, cb2[r0.z + 201].w
      mul r10.xyz, cb1[0].xyzx, cb2[r0.z + 200].xyzx
      lt r3.w, l(0.000000), r2.w
      mul r2.w, r1.w, r2.w
      mul r12.xyz, cb1[1].xyzx, cb2[r0.z + 201].xyzx
      mul r12.xyz, r2.wwww, r12.xyzx
      mad r11.xyz, r11.yyyy, l(-0.000000, -2.000000, -0.000000, 0.000000), r11.xyzx
      dp3 r2.w, r11.xyzx, r4.xyzx
      max r2.w, r2.w, l(0.000000)
      log r2.w, r2.w
      mul r2.w, r0.x, r2.w
      exp r2.w, r2.w
      mul r2.w, r2.w, cb2[r0.z + 200].w
      mul r1.w, r1.w, r2.w
      mul r6.xyz, cb1[2].xyzx, cb2[r0.z + 202].xyzx
      mul r11.xyzw, r6.xyzw, r1.wwww
      movc r11.xyzw, r3.wwww, r11.xyzw, l(0,0,0,1.000000)
      and r6.xyz, r3.wwww, r12.xyzx
      mad r7.xyz, r10.xyzx, cb1[1].xyzx, r6.xyzx
      add r10.xyzw, r7.xyzw, r11.xyzw
    else 
      mov r10.xyzw, l(0,0,0,1.000000)
    endif 
    add r9.xyzw, r9.xyzw, r10.xyzw
    iadd r0.y, r0.y, l(1)
  endloop 
  mov r2.w, l(1.000000)
  mov r3.w, l(1.000000)
  mov r5.xyzw, r9.xyzw
  mov r0.y, l(0)
  loop 
    ige r0.z, r0.y, cb2[650].z
    breakc_nz r0.z
    imul null, r0.z, r0.y, l(5)
    add r6.xyz, v2.xyzx, -cb2[r0.z + 404].xyzx
    dp3 r1.w, r6.xyzx, r6.xyzx
    rsq r4.w, r1.w
    mul r6.xyz, r4.wwww, r6.xyzx
    sqrt r4.w, r1.w
    add r7.xyz, cb2[r0.z + 403].xyzx, -cb2[r0.z + 404].xyzx
    dp3 r6.w, r7.xyzx, r7.xyzx
    rsq r6.w, r6.w
    mul r7.xyz, r6.wwww, r7.xyzx
    dp3 r6.w, r6.xyzx, r7.xyzx
    lt r4.w, cb2[r0.z + 404].w, r4.w
    mul r7.x, l(0.500000), cb2[r0.z + 403].w
    sincos null, r7.x, r7.x
    lt r6.w, r6.w, r7.x
    or r4.w, r4.w, r6.w
    if_z r4.w
      mad r1.w, r1.w, cb2[r0.z + 402].w, l(1.000000)
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
      dp3 r4.w, -r6.xyzx, r1.xyzx
      mul r4.w, r4.w, cb2[r0.z + 401].w
      mul r7.xyz, cb1[0].xyzx, cb2[r0.z + 400].xyzx
      lt r6.w, l(0.000000), r4.w
      mul r4.w, r1.w, r4.w
      mul r8.xyz, cb1[1].xyzx, cb2[r0.z + 401].xyzx
      mul r8.xyz, r4.wwww, r8.xyzx
      mad r6.xyz, r6.yyyy, l(-0.000000, -2.000000, -0.000000, 0.000000), r6.xyzx
      dp3 r4.w, r6.xyzx, r4.xyzx
      max r4.w, r4.w, l(0.000000)
      log r4.w, r4.w
      mul r4.w, r0.x, r4.w
      exp r4.w, r4.w
      mul r4.w, r4.w, cb2[r0.z + 400].w
      mul r1.w, r1.w, r4.w
      mul r2.xyz, cb1[2].xyzx, cb2[r0.z + 402].xyzx
      mul r10.xyzw, r2.xyzw, r1.wwww
      movc r10.xyzw, r6.wwww, r10.xyzw, l(0,0,0,1.000000)
      and r2.xyz, r6.wwww, r8.xyzx
      mad r3.xyz, r7.xyzx, cb1[1].xyzx, r2.xyzx
      add r6.xyzw, r3.xyzw, r10.xyzw
    else 
      mov r6.xyzw, l(0,0,0,1.000000)
    endif 
    add r5.xyzw, r5.xyzw, r6.xyzw
    iadd r0.y, r0.y, l(1)
  endloop 
endif 
add r0.x, r0.w, -cb3[1].x
add r0.y, -cb3[1].x, cb3[1].y
div r0.x, r0.x, r0.y
max r0.x, r0.x, l(0.000000)
mov r1.xyz, cb3[0].xyzx
mov r1.w, l(1.000000)
add r1.xyzw, -r5.xyzw, r1.xyzw
mad r0.xyzw, r0.xxxx, r1.xyzw, r5.xyzw
movc o0.xyzw, cb3[0].wwww, r0.xyzw, r5.xyzw
ret 
// Approximately 345 instruction slots used
