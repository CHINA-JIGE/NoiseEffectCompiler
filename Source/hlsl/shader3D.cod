//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /Fc /T ps_5_0 /E PS_DefaultDraw /Fo outPS.cso shader3D.fx
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   struct N_DirectionalLight
//   {
//       
//       float3 mAmbientColor;          // Offset:    0
//       float mSpecularIntensity;      // Offset:   12
//       float3 mDiffuseColor;          // Offset:   16
//       float mDiffuseIntensity;       // Offset:   28
//       float3 mSpecularColor;         // Offset:   32
//       float mPad2;                   // Offset:   44
//       float3 mDirection;             // Offset:   48
//       float mPad3;                   // Offset:   60
//
//   } gDirectionalLight_Dynamic[10];   // Offset:    0 Size:   640
//   
//   struct N_PointLight
//   {
//       
//       float3 mAmbientColor;          // Offset:  640
//       float mSpecularIntensity;      // Offset:  652
//       float3 mDiffuseColor;          // Offset:  656
//       float mDiffuseIntensity;       // Offset:  668
//       float3 mSpecularColor;         // Offset:  672
//       float mAttenuationFactor;      // Offset:  684
//       float3 mPosition;              // Offset:  688
//       float mLightingRange;          // Offset:  700
//
//   } gPointLight_Dynamic[10];         // Offset:  640 Size:   640
//   
//   struct N_SpotLight
//   {
//       
//       float3 mAmbientColor;          // Offset: 1280
//       float mSpecularIntensity;      // Offset: 1292
//       float3 mDiffuseColor;          // Offset: 1296
//       float mDiffuseIntensity;       // Offset: 1308
//       float3 mSpecularColor;         // Offset: 1312
//       float mAttenuationFactor;      // Offset: 1324
//       float3 mLitAt;                 // Offset: 1328
//       float mLightingAngle;          // Offset: 1340
//       float3 mPosition;              // Offset: 1344
//       float mLightingRange;          // Offset: 1356
//
//   } gSpotLight_Dynamic[10];          // Offset: 1280 Size:   800
//   int gDirectionalLightCount_Dynamic;// Offset: 2080 Size:     4
//   int gPointLightCount_Dynamic;      // Offset: 2084 Size:     4
//   int gSpotLightCount_Dynamic;       // Offset: 2088 Size:     4
//   int gIsLightingEnabled_Dynamic;    // Offset: 2092 Size:     4
//   float3 gCamPos;                    // Offset: 2096 Size:    12
//   float mPad1;                       // Offset: 2108 Size:     4 [unused]
//
// }
//
// cbuffer cbPerSubset
// {
//
//   struct N_Material_Basic
//   {
//       
//       float3 mAmbientColor;          // Offset:    0
//       int mSpecularSmoothLevel;      // Offset:   12
//       float3 mDiffuseColor;          // Offset:   16
//       float mNormalMapBumpIntensity; // Offset:   28
//       float3 mSpecularColor;         // Offset:   32
//       float mEnvironmentMapTransparency;// Offset:   44
//
//   } gMaterial;                       // Offset:    0 Size:    48
//   int gIsDiffuseMapValid;            // Offset:   48 Size:     4
//   int gIsNormalMapValid;             // Offset:   52 Size:     4
//   int gIsSpecularMapValid;           // Offset:   56 Size:     4
//   int gIsEnvironmentMapVaild;        // Offset:   60 Size:     4
//
// }
//
// cbuffer cbRarely
// {
//
//   struct N_DirectionalLight
//   {
//       
//       float3 mAmbientColor;          // Offset:    0
//       float mSpecularIntensity;      // Offset:   12
//       float3 mDiffuseColor;          // Offset:   16
//       float mDiffuseIntensity;       // Offset:   28
//       float3 mSpecularColor;         // Offset:   32
//       float mPad2;                   // Offset:   44
//       float3 mDirection;             // Offset:   48
//       float mPad3;                   // Offset:   60
//
//   } gDirectionalLight_Static[50];    // Offset:    0 Size:  3200
//   
//   struct N_PointLight
//   {
//       
//       float3 mAmbientColor;          // Offset: 3200
//       float mSpecularIntensity;      // Offset: 3212
//       float3 mDiffuseColor;          // Offset: 3216
//       float mDiffuseIntensity;       // Offset: 3228
//       float3 mSpecularColor;         // Offset: 3232
//       float mAttenuationFactor;      // Offset: 3244
//       float3 mPosition;              // Offset: 3248
//       float mLightingRange;          // Offset: 3260
//
//   } gPointLight_Static[50];          // Offset: 3200 Size:  3200
//   
//   struct N_SpotLight
//   {
//       
//       float3 mAmbientColor;          // Offset: 6400
//       float mSpecularIntensity;      // Offset: 6412
//       float3 mDiffuseColor;          // Offset: 6416
//       float mDiffuseIntensity;       // Offset: 6428
//       float3 mSpecularColor;         // Offset: 6432
//       float mAttenuationFactor;      // Offset: 6444
//       float3 mLitAt;                 // Offset: 6448
//       float mLightingAngle;          // Offset: 6460
//       float3 mPosition;              // Offset: 6464
//       float mLightingRange;          // Offset: 6476
//
//   } gSpotLight_Static[50];           // Offset: 6400 Size:  4000
//   int gDirectionalLightCount_Static; // Offset: 10400 Size:     4
//   int gPointLightCount_Static;       // Offset: 10404 Size:     4
//   int gSpotLightCount_Static;        // Offset: 10408 Size:     4
//   int gIsLightingEnabled_Static;     // Offset: 10412 Size:     4
//
// }
//
// cbuffer cbAtmosphere
// {
//
//   float3 gFogColor3;                 // Offset:    0 Size:    12
//   int gFogEnabled;                   // Offset:   12 Size:     4
//   float gFogNear;                    // Offset:   16 Size:     4
//   float gFogFar;                     // Offset:   20 Size:     4
//   int gIsSkyDomeValid;               // Offset:   24 Size:     4 [unused]
//   int gIsSkyBoxValid;                // Offset:   28 Size:     4 [unused]
//   float gSkyBoxWidth;                // Offset:   32 Size:     4 [unused]
//   float gSkyBoxHeight;               // Offset:   36 Size:     4 [unused]
//   float gSkyBoxDepth;                // Offset:   40 Size:     4 [unused]
//   float mPad3;                       // Offset:   44 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// samplerDefault                    sampler      NA          NA    0        1
// gDiffuseMap                       texture  float4          2d    0        1
// gNormalMap                        texture  float4          2d    1        1
// gCubeMap                          texture  float4        cube    2        1
// cbPerFrame                        cbuffer      NA          NA    0        1
// cbPerSubset                       cbuffer      NA          NA    1        1
// cbRarely                          cbuffer      NA          NA    2        1
// cbAtmosphere                      cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float       
// COLOR                    0   xyzw        1     NONE  float   xyzw
// POSITION                 0   xyz         2     NONE  float   xyz 
// NORMAL                   0   xyz         3     NONE  float   xyz 
// TEXCOORD                 0   xy          4     NONE  float   xy  
// TANGENT                  0   xyz         5     NONE  float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_Target                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[132], dynamicIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb2[651], dynamicIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 28
ieq r0.x, cb0[130].w, l(0)
ieq r0.y, cb2[650].w, l(0)
and r0.x, r0.y, r0.x
if_nz r0.x
  mov o0.xyzw, v1.xyzw
  ret 
endif 
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v3.xyzx
add r1.xyz, -v2.xyzx, cb0[131].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
ieq r1.w, cb3[0].w, l(1)
lt r2.x, cb3[1].y, r0.w
and r1.w, r1.w, r2.x
if_nz cb1[3].y
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t1.xyzw, s0
  mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  add_sat r2.w, -cb1[1].w, l(1.000000)
  add r3.xyz, -r2.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r2.xyz, r2.wwww, r3.xyzx, r2.xyzx
  dp3 r2.w, r2.xyzx, r2.xyzx
  rsq r2.w, r2.w
  mul r2.xyz, r2.wwww, r2.xyzx
else 
  mov r2.xyz, l(0,1.000000,0,0)
endif 
dp3 r2.w, r0.xyzx, v5.xyzx
mad r3.xyz, -r2.wwww, r0.xyzx, v5.xyzx
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
mul r4.xyz, r0.zxyz, r3.yzxy
mad r4.xyz, r0.yzxy, r3.zxyz, -r4.xyzx
dp3 r2.w, r4.xyzx, r4.xyzx
rsq r2.w, r2.w
mul r4.xyz, r2.wwww, r4.xyzx
dp3 r5.x, r3.xyzx, r2.xyzx
dp3 r5.y, r0.xyzx, r2.xyzx
dp3 r5.z, r4.xyzx, r2.xyzx
dp3 r2.w, -r1.xyzx, r5.xyzx
add r2.w, r2.w, r2.w
mad r5.xyz, r5.xyzx, -r2.wwww, -r1.xyzx
sample_indexable(texturecube)(float,float,float,float) r5.xyz, r5.xyzx, t2.xyzw, s0
if_nz cb1[3].y
  sample_indexable(texture2d)(float,float,float,float) r6.xyz, v4.xyxx, t1.xyzw, s0
  mad r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  add_sat r2.w, -cb1[1].w, l(1.000000)
  add r7.xyz, -r6.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r6.xyz, r2.wwww, r7.xyzx, r6.xyzx
  dp3 r2.w, r6.xyzx, r6.xyzx
  rsq r2.w, r2.w
  mul r6.xyz, r2.wwww, r6.xyzx
else 
  mov r6.xyz, l(0,1.000000,0,0)
endif 
dp3 r7.x, r3.xyzx, r6.xyzx
dp3 r7.y, r0.xyzx, r6.xyzx
dp3 r7.z, r4.xyzx, r6.xyzx
dp3 r2.w, -r1.xyzx, r7.xyzx
add r2.w, r2.w, r2.w
mad r7.xyz, r7.xyzx, -r2.wwww, -r1.xyzx
sample_indexable(texturecube)(float,float,float,float) r7.xyz, r7.xyzx, t2.xyzw, s0
if_nz cb1[3].y
  sample_indexable(texture2d)(float,float,float,float) r8.xyz, v4.xyxx, t1.xyzw, s0
  mad r8.xyz, r8.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  add_sat r2.w, -cb1[1].w, l(1.000000)
  add r9.xyz, -r8.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r8.xyz, r2.wwww, r9.xyzx, r8.xyzx
  dp3 r2.w, r8.xyzx, r8.xyzx
  rsq r2.w, r2.w
  mul r8.xyz, r2.wwww, r8.xyzx
else 
  mov r8.xyz, l(0,1.000000,0,0)
endif 
dp3 r9.x, r3.xyzx, r8.xyzx
dp3 r9.y, r0.xyzx, r8.xyzx
dp3 r9.z, r4.xyzx, r8.xyzx
dp3 r2.w, -r1.xyzx, r9.xyzx
add r2.w, r2.w, r2.w
mad r9.xyz, r9.xyzx, -r2.wwww, -r1.xyzx
sample_indexable(texturecube)(float,float,float,float) r9.xyz, r9.xyzx, t2.xyzw, s0
if_nz cb1[3].y
  sample_indexable(texture2d)(float,float,float,float) r10.xyz, v4.xyxx, t1.xyzw, s0
  mad r10.xyz, r10.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  add_sat r2.w, -cb1[1].w, l(1.000000)
  add r11.xyz, -r10.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r10.xyz, r2.wwww, r11.xyzx, r10.xyzx
  dp3 r2.w, r10.xyzx, r10.xyzx
  rsq r2.w, r2.w
  mul r10.xyz, r2.wwww, r10.xyzx
else 
  mov r10.xyz, l(0,1.000000,0,0)
endif 
dp3 r11.x, r3.xyzx, r10.xyzx
dp3 r11.y, r0.xyzx, r10.xyzx
dp3 r11.z, r4.xyzx, r10.xyzx
dp3 r2.w, -r1.xyzx, r11.xyzx
add r2.w, r2.w, r2.w
mad r11.xyz, r11.xyzx, -r2.wwww, -r1.xyzx
sample_indexable(texturecube)(float,float,float,float) r11.xyz, r11.xyzx, t2.xyzw, s0
if_nz cb1[3].y
  sample_indexable(texture2d)(float,float,float,float) r12.xyz, v4.xyxx, t1.xyzw, s0
  mad r12.xyz, r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  add_sat r2.w, -cb1[1].w, l(1.000000)
  add r13.xyz, -r12.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r12.xyz, r2.wwww, r13.xyzx, r12.xyzx
  dp3 r2.w, r12.xyzx, r12.xyzx
  rsq r2.w, r2.w
  mul r12.xyz, r2.wwww, r12.xyzx
else 
  mov r12.xyz, l(0,1.000000,0,0)
endif 
dp3 r13.x, r3.xyzx, r12.xyzx
dp3 r13.y, r0.xyzx, r12.xyzx
dp3 r13.z, r4.xyzx, r12.xyzx
dp3 r2.w, -r1.xyzx, r13.xyzx
add r2.w, r2.w, r2.w
mad r13.xyz, r13.xyzx, -r2.wwww, -r1.xyzx
sample_indexable(texturecube)(float,float,float,float) r13.xyz, r13.xyzx, t2.xyzw, s0
if_nz cb1[3].y
  sample_indexable(texture2d)(float,float,float,float) r14.xyz, v4.xyxx, t1.xyzw, s0
  mad r14.xyz, r14.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  add_sat r2.w, -cb1[1].w, l(1.000000)
  add r15.xyz, -r14.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r14.xyz, r2.wwww, r15.xyzx, r14.xyzx
  dp3 r2.w, r14.xyzx, r14.xyzx
  rsq r2.w, r2.w
  mul r14.xyz, r2.wwww, r14.xyzx
else 
  mov r14.xyz, l(0,1.000000,0,0)
endif 
dp3 r15.x, r3.xyzx, r14.xyzx
dp3 r15.y, r0.xyzx, r14.xyzx
dp3 r15.z, r4.xyzx, r14.xyzx
dp3 r2.w, -r1.xyzx, r15.xyzx
add r2.w, r2.w, r2.w
mad r15.xyz, r15.xyzx, -r2.wwww, -r1.xyzx
sample_indexable(texturecube)(float,float,float,float) r15.xyz, r15.xyzx, t2.xyzw, s0
if_nz r1.w
  mov o0.xyz, cb3[0].xyzx
  mov o0.w, l(1.000000)
  ret 
endif 
if_nz cb0[130].w
  sample_indexable(texture2d)(float,float,float,float) r16.xyz, v4.xyxx, t0.xyzw, s0
  movc r17.xyz, cb1[3].xxxx, r16.xyzx, cb1[1].xyzx
  mov_sat r5.w, cb1[2].w
  movc r18.xyzw, cb1[3].wwww, r5.xyzw, l(0,0,0,0)
  dp3 r19.x, r1.xyzx, r3.xyzx
  dp3 r19.y, r1.xyzx, r0.xyzx
  dp3 r19.z, r1.xyzx, r4.xyzx
  itof r1.w, cb1[0].w
  dp3 r2.w, r2.xyzx, r2.xyzx
  rsq r2.w, r2.w
  mul r20.xyz, r2.wwww, r2.xyzx
  dp3 r2.w, r19.xyzx, r19.xyzx
  rsq r2.w, r2.w
  mul r19.xyz, r2.wwww, r19.xyzx
  mov r21.w, l(1.000000)
  mov r22.w, l(1.000000)
  mov r23.xyzw, l(0,0,0,0)
  mov r2.w, l(0)
  loop 
    ige r3.w, r2.w, cb0[130].x
    breakc_nz r3.w
    ishl r3.w, r2.w, l(2)
    dp3 r4.w, cb0[r3.w + 3].xyzx, cb0[r3.w + 3].xyzx
    rsq r4.w, r4.w
    mul r24.xyz, r4.wwww, cb0[r3.w + 3].xyzx
    if_nz cb1[3].z
      mov r25.xyz, r16.xyzx
    else 
      mov r25.xyz, cb1[2].xyzx
    endif 
    dp3 r26.x, r24.xyzx, r3.xyzx
    dp3 r26.y, r24.xyzx, r0.xyzx
    dp3 r26.z, r24.xyzx, r4.xyzx
    dp3 r4.w, -r26.xyzx, r2.xyzx
    mul r4.w, r4.w, cb0[r3.w + 1].w
    mul r24.xyz, cb1[0].xyzx, cb0[r3.w + 0].xyzx
    lt r6.w, l(0.000000), r4.w
    mul r27.xyz, r17.xyzx, cb0[r3.w + 1].xyzx
    mul r27.xyz, r4.wwww, r27.xyzx
    dp3 r4.w, r26.xyzx, r20.xyzx
    add r4.w, r4.w, r4.w
    mad r26.xyz, r20.xyzx, -r4.wwww, r26.xyzx
    dp3 r4.w, r26.xyzx, r19.xyzx
    max r4.w, r4.w, l(0.000000)
    log r4.w, r4.w
    mul r4.w, r1.w, r4.w
    exp r4.w, r4.w
    mul r4.w, r4.w, cb0[r3.w + 0].w
    mul r21.xyz, r25.xyzx, cb0[r3.w + 2].xyzx
    mul r25.xyzw, r21.xyzw, r4.wwww
    movc r25.xyzw, r6.wwww, r25.xyzw, l(0,0,0,1.000000)
    and r21.xyz, r6.wwww, r27.xyzx
    mad r21.xyz, r24.xyzx, r17.xyzx, r21.xyzx
    add r24.xyz, r18.xyzx, -r21.xyzx
    mad r24.xyz, r18.wwww, r24.xyzx, r21.xyzx
    mov r24.w, r23.w
    add r24.xyzw, r25.xyzw, r24.xyzw
    mov r22.xyz, r23.xyzx
    add r23.xyzw, r22.xyzw, r24.xyzw
    iadd r2.w, r2.w, l(1)
  endloop 
  mov r5.xyz, r7.xyzx
  movc r2.xyzw, cb1[3].wwww, r5.xyzw, l(0,0,0,0)
  dp3 r3.w, r6.xyzx, r6.xyzx
  rsq r3.w, r3.w
  mul r6.xyz, r3.wwww, r6.xyzx
  mov r7.w, l(1.000000)
  mov r18.w, l(1.000000)
  mov r20.xyzw, r23.xyzw
  mov r3.w, l(0)
  loop 
    ige r4.w, r3.w, cb0[130].y
    breakc_nz r4.w
    ishl r4.w, r3.w, l(2)
    add r21.xyz, v2.xyzx, -cb0[r4.w + 43].xyzx
    dp3 r6.w, r21.xyzx, r21.xyzx
    sqrt r8.w, r6.w
    ge r8.w, cb0[r4.w + 43].w, r8.w
    if_nz r8.w
      rsq r8.w, r6.w
      mul r21.xyz, r8.wwww, r21.xyzx
      mad r6.w, r6.w, cb0[r4.w + 42].w, l(1.000000)
      div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
      if_nz cb1[3].z
        mov r22.xyz, r16.xyzx
      else 
        mov r22.xyz, cb1[2].xyzx
      endif 
      dp3 r24.x, r21.xyzx, r3.xyzx
      dp3 r24.y, r21.xyzx, r0.xyzx
      dp3 r24.z, r21.xyzx, r4.xyzx
      dp3 r8.w, -r21.xyzx, r0.xyzx
      mul r8.w, r8.w, cb0[r4.w + 41].w
      mul r21.xyz, cb1[0].xyzx, cb0[r4.w + 40].xyzx
      lt r9.w, l(0.000000), r8.w
      mul r8.w, r6.w, r8.w
      mul r25.xyz, r17.xyzx, cb0[r4.w + 41].xyzx
      mul r25.xyz, r8.wwww, r25.xyzx
      dp3 r8.w, r24.xyzx, r6.xyzx
      add r8.w, r8.w, r8.w
      mad r24.xyz, r6.xyzx, -r8.wwww, r24.xyzx
      dp3 r8.w, r24.xyzx, r19.xyzx
      max r8.w, r8.w, l(0.000000)
      log r8.w, r8.w
      mul r8.w, r1.w, r8.w
      exp r8.w, r8.w
      mul r8.w, r8.w, cb0[r4.w + 40].w
      mul r6.w, r6.w, r8.w
      mul r7.xyz, r22.xyzx, cb0[r4.w + 42].xyzx
      mul r22.xyzw, r7.xyzw, r6.wwww
      movc r22.xyzw, r9.wwww, r22.xyzw, l(0,0,0,1.000000)
      and r7.xyz, r9.wwww, r25.xyzx
      mad r7.xyz, r21.xyzx, r17.xyzx, r7.xyzx
      add r21.xyz, r2.xyzx, -r7.xyzx
      mad r18.xyz, r2.wwww, r21.xyzx, r7.xyzx
      add r21.xyzw, r18.xyzw, r22.xyzw
    else 
      mov r21.xyzw, l(0,0,0,1.000000)
    endif 
    add r20.xyzw, r20.xyzw, r21.xyzw
    iadd r3.w, r3.w, l(1)
  endloop 
  mov r5.xyz, r9.xyzx
  movc r2.xyzw, cb1[3].wwww, r5.xyzw, l(0,0,0,0)
  dp3 r3.w, r8.xyzx, r8.xyzx
  rsq r3.w, r3.w
  mul r5.xyz, r3.wwww, r8.xyzx
  mov r6.w, l(1.000000)
  mov r7.w, l(1.000000)
  mov r8.xyzw, r20.xyzw
  mov r3.w, l(0)
  loop 
    ige r4.w, r3.w, cb0[130].z
    breakc_nz r4.w
    imul null, r4.w, r3.w, l(5)
    add r9.xyz, v2.xyzx, -cb0[r4.w + 84].xyzx
    dp3 r5.w, r9.xyzx, r9.xyzx
    rsq r9.w, r5.w
    mul r9.xyz, r9.wwww, r9.xyzx
    sqrt r9.w, r5.w
    add r18.xyz, cb0[r4.w + 83].xyzx, -cb0[r4.w + 84].xyzx
    dp3 r10.w, r18.xyzx, r18.xyzx
    rsq r10.w, r10.w
    mul r18.xyz, r10.wwww, r18.xyzx
    dp3 r10.w, r9.xyzx, r18.xyzx
    lt r9.w, cb0[r4.w + 84].w, r9.w
    mul r12.w, l(0.500000), cb0[r4.w + 83].w
    sincos null, r12.w, r12.w
    lt r10.w, r10.w, r12.w
    or r9.w, r9.w, r10.w
    if_z r9.w
      mad r5.w, r5.w, cb0[r4.w + 82].w, l(1.000000)
      div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
      if_nz cb1[3].z
        mov r18.xyz, r16.xyzx
      else 
        mov r18.xyz, cb1[2].xyzx
      endif 
      dp3 r9.w, -r9.xyzx, r0.xyzx
      mul r9.w, r9.w, cb0[r4.w + 81].w
      mul r21.xyz, cb1[0].xyzx, cb0[r4.w + 80].xyzx
      lt r10.w, l(0.000000), r9.w
      mul r9.w, r5.w, r9.w
      mul r22.xyz, r17.xyzx, cb0[r4.w + 81].xyzx
      mul r22.xyz, r9.wwww, r22.xyzx
      dp3 r9.w, r9.xyzx, r5.xyzx
      add r9.w, r9.w, r9.w
      mad r9.xyz, r5.xyzx, -r9.wwww, r9.xyzx
      dp3 r9.x, r9.xyzx, r19.xyzx
      max r9.x, r9.x, l(0.000000)
      log r9.x, r9.x
      mul r9.x, r1.w, r9.x
      exp r9.x, r9.x
      mul r9.x, r9.x, cb0[r4.w + 80].w
      mul r5.w, r5.w, r9.x
      mul r6.xyz, r18.xyzx, cb0[r4.w + 82].xyzx
      mul r9.xyzw, r6.xyzw, r5.wwww
      movc r9.xyzw, r10.wwww, r9.xyzw, l(0,0,0,1.000000)
      and r6.xyz, r10.wwww, r22.xyzx
      mad r6.xyz, r21.xyzx, r17.xyzx, r6.xyzx
      add r18.xyz, r2.xyzx, -r6.xyzx
      mad r7.xyz, r2.wwww, r18.xyzx, r6.xyzx
      add r9.xyzw, r7.xyzw, r9.xyzw
    else 
      mov r9.xyzw, l(0,0,0,1.000000)
    endif 
    add r8.xyzw, r8.xyzw, r9.xyzw
    iadd r3.w, r3.w, l(1)
  endloop 
else 
  mov r8.xyzw, l(0,0,0,0)
endif 
if_nz cb2[650].w
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, v4.xyxx, t0.xyzw, s0
  movc r5.xyz, cb1[3].xxxx, r2.xyzx, cb1[1].xyzx
  mov_sat r11.w, cb1[2].w
  movc r6.xyzw, cb1[3].wwww, r11.xyzw, l(0,0,0,0)
  dp3 r7.x, r1.xyzx, r3.xyzx
  dp3 r7.y, r1.xyzx, r0.xyzx
  dp3 r7.z, r1.xyzx, r4.xyzx
  itof r1.x, cb1[0].w
  dp3 r1.y, r10.xyzx, r10.xyzx
  rsq r1.y, r1.y
  mul r1.yzw, r1.yyyy, r10.xxyz
  dp3 r2.w, r7.xyzx, r7.xyzx
  rsq r2.w, r2.w
  mul r7.xyz, r2.wwww, r7.xyzx
  mov r9.w, l(1.000000)
  mov r16.w, l(1.000000)
  mov r17.xyzw, r8.xyzw
  mov r2.w, l(0)
  loop 
    ige r3.w, r2.w, cb2[650].x
    breakc_nz r3.w
    ishl r3.w, r2.w, l(2)
    dp3 r4.w, cb2[r3.w + 3].xyzx, cb2[r3.w + 3].xyzx
    rsq r4.w, r4.w
    mul r18.xyz, r4.wwww, cb2[r3.w + 3].xyzx
    if_nz cb1[3].z
      mov r19.xyz, r2.xyzx
    else 
      mov r19.xyz, cb1[2].xyzx
    endif 
    dp3 r20.x, r18.xyzx, r3.xyzx
    dp3 r20.y, r18.xyzx, r0.xyzx
    dp3 r20.z, r18.xyzx, r4.xyzx
    dp3 r4.w, -r20.xyzx, r10.xyzx
    mul r4.w, r4.w, cb2[r3.w + 1].w
    mul r18.xyz, cb1[0].xyzx, cb2[r3.w + 0].xyzx
    lt r5.w, l(0.000000), r4.w
    mul r21.xyz, r5.xyzx, cb2[r3.w + 1].xyzx
    mul r21.xyz, r4.wwww, r21.xyzx
    dp3 r4.w, r20.xyzx, r1.yzwy
    add r4.w, r4.w, r4.w
    mad r20.xyz, r1.yzwy, -r4.wwww, r20.xyzx
    dp3 r4.w, r20.xyzx, r7.xyzx
    max r4.w, r4.w, l(0.000000)
    log r4.w, r4.w
    mul r4.w, r1.x, r4.w
    exp r4.w, r4.w
    mul r4.w, r4.w, cb2[r3.w + 0].w
    mul r9.xyz, r19.xyzx, cb2[r3.w + 2].xyzx
    mul r19.xyzw, r9.xyzw, r4.wwww
    movc r19.xyzw, r5.wwww, r19.xyzw, l(0,0,0,1.000000)
    and r9.xyz, r5.wwww, r21.xyzx
    mad r9.xyz, r18.xyzx, r5.xyzx, r9.xyzx
    add r18.xyz, r6.xyzx, -r9.xyzx
    mad r18.xyz, r6.wwww, r18.xyzx, r9.xyzx
    mov r18.w, r17.w
    add r18.xyzw, r19.xyzw, r18.xyzw
    mov r16.xyz, r17.xyzx
    add r17.xyzw, r16.xyzw, r18.xyzw
    iadd r2.w, r2.w, l(1)
  endloop 
  mov r11.xyz, r13.xyzx
  movc r6.xyzw, cb1[3].wwww, r11.xyzw, l(0,0,0,0)
  dp3 r1.y, r12.xyzx, r12.xyzx
  rsq r1.y, r1.y
  mul r1.yzw, r1.yyyy, r12.xxyz
  mov r9.w, l(1.000000)
  mov r10.w, l(1.000000)
  mov r12.xyzw, r17.xyzw
  mov r2.w, l(0)
  loop 
    ige r3.w, r2.w, cb2[650].y
    breakc_nz r3.w
    ishl r3.w, r2.w, l(2)
    add r13.xyz, v2.xyzx, -cb2[r3.w + 203].xyzx
    dp3 r4.w, r13.xyzx, r13.xyzx
    sqrt r5.w, r4.w
    ge r5.w, cb2[r3.w + 203].w, r5.w
    if_nz r5.w
      rsq r5.w, r4.w
      mul r13.xyz, r5.wwww, r13.xyzx
      mad r4.w, r4.w, cb2[r3.w + 202].w, l(1.000000)
      div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
      if_nz cb1[3].z
        mov r16.xyz, r2.xyzx
      else 
        mov r16.xyz, cb1[2].xyzx
      endif 
      dp3 r18.x, r13.xyzx, r3.xyzx
      dp3 r18.y, r13.xyzx, r0.xyzx
      dp3 r18.z, r13.xyzx, r4.xyzx
      dp3 r5.w, -r13.xyzx, r0.xyzx
      mul r5.w, r5.w, cb2[r3.w + 201].w
      mul r13.xyz, cb1[0].xyzx, cb2[r3.w + 200].xyzx
      lt r7.w, l(0.000000), r5.w
      mul r5.w, r4.w, r5.w
      mul r19.xyz, r5.xyzx, cb2[r3.w + 201].xyzx
      mul r19.xyz, r5.wwww, r19.xyzx
      dp3 r5.w, r18.xyzx, r1.yzwy
      add r5.w, r5.w, r5.w
      mad r18.xyz, r1.yzwy, -r5.wwww, r18.xyzx
      dp3 r5.w, r18.xyzx, r7.xyzx
      max r5.w, r5.w, l(0.000000)
      log r5.w, r5.w
      mul r5.w, r1.x, r5.w
      exp r5.w, r5.w
      mul r5.w, r5.w, cb2[r3.w + 200].w
      mul r4.w, r4.w, r5.w
      mul r9.xyz, r16.xyzx, cb2[r3.w + 202].xyzx
      mul r16.xyzw, r9.xyzw, r4.wwww
      movc r16.xyzw, r7.wwww, r16.xyzw, l(0,0,0,1.000000)
      and r9.xyz, r7.wwww, r19.xyzx
      mad r9.xyz, r13.xyzx, r5.xyzx, r9.xyzx
      add r13.xyz, r6.xyzx, -r9.xyzx
      mad r10.xyz, r6.wwww, r13.xyzx, r9.xyzx
      add r13.xyzw, r10.xyzw, r16.xyzw
    else 
      mov r13.xyzw, l(0,0,0,1.000000)
    endif 
    add r12.xyzw, r12.xyzw, r13.xyzw
    iadd r2.w, r2.w, l(1)
  endloop 
  mov r11.xyz, r15.xyzx
  movc r3.xyzw, cb1[3].wwww, r11.xyzw, l(0,0,0,0)
  dp3 r1.y, r14.xyzx, r14.xyzx
  rsq r1.y, r1.y
  mul r1.yzw, r1.yyyy, r14.xxyz
  mov r4.w, l(1.000000)
  mov r6.w, l(1.000000)
  mov r8.xyzw, r12.xyzw
  mov r2.w, l(0)
  loop 
    ige r5.w, r2.w, cb2[650].z
    breakc_nz r5.w
    imul null, r5.w, r2.w, l(5)
    add r9.xyz, v2.xyzx, -cb2[r5.w + 404].xyzx
    dp3 r7.w, r9.xyzx, r9.xyzx
    rsq r9.w, r7.w
    mul r9.xyz, r9.wwww, r9.xyzx
    sqrt r9.w, r7.w
    add r10.xyz, cb2[r5.w + 403].xyzx, -cb2[r5.w + 404].xyzx
    dp3 r10.w, r10.xyzx, r10.xyzx
    rsq r10.w, r10.w
    mul r10.xyz, r10.wwww, r10.xyzx
    dp3 r10.x, r9.xyzx, r10.xyzx
    lt r9.w, cb2[r5.w + 404].w, r9.w
    mul r10.y, l(0.500000), cb2[r5.w + 403].w
    sincos null, r10.y, r10.y
    lt r10.x, r10.x, r10.y
    or r9.w, r9.w, r10.x
    if_z r9.w
      mad r7.w, r7.w, cb2[r5.w + 402].w, l(1.000000)
      div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
      if_nz cb1[3].z
        mov r10.xyz, r2.xyzx
      else 
        mov r10.xyz, cb1[2].xyzx
      endif 
      dp3 r9.w, -r9.xyzx, r0.xyzx
      mul r9.w, r9.w, cb2[r5.w + 401].w
      mul r11.xyz, cb1[0].xyzx, cb2[r5.w + 400].xyzx
      lt r10.w, l(0.000000), r9.w
      mul r9.w, r7.w, r9.w
      mul r13.xyz, r5.xyzx, cb2[r5.w + 401].xyzx
      mul r13.xyz, r9.wwww, r13.xyzx
      dp3 r9.w, r9.xyzx, r1.yzwy
      add r9.w, r9.w, r9.w
      mad r9.xyz, r1.yzwy, -r9.wwww, r9.xyzx
      dp3 r9.x, r9.xyzx, r7.xyzx
      max r9.x, r9.x, l(0.000000)
      log r9.x, r9.x
      mul r9.x, r1.x, r9.x
      exp r9.x, r9.x
      mul r9.x, r9.x, cb2[r5.w + 400].w
      mul r7.w, r7.w, r9.x
      mul r4.xyz, r10.xyzx, cb2[r5.w + 402].xyzx
      mul r9.xyzw, r4.xyzw, r7.wwww
      movc r9.xyzw, r10.wwww, r9.xyzw, l(0,0,0,1.000000)
      and r4.xyz, r10.wwww, r13.xyzx
      mad r4.xyz, r11.xyzx, r5.xyzx, r4.xyzx
      add r10.xyz, r3.xyzx, -r4.xyzx
      mad r6.xyz, r3.wwww, r10.xyzx, r4.xyzx
      add r9.xyzw, r6.xyzw, r9.xyzw
    else 
      mov r9.xyzw, l(0,0,0,1.000000)
    endif 
    add r8.xyzw, r8.xyzw, r9.xyzw
    iadd r2.w, r2.w, l(1)
  endloop 
endif 
add r0.x, r0.w, -cb3[1].x
add r0.y, -cb3[1].x, cb3[1].y
div r0.x, r0.x, r0.y
max r0.x, r0.x, l(0.000000)
mov r1.xyz, cb3[0].xyzx
mov r1.w, l(1.000000)
add r1.xyzw, -r8.xyzw, r1.xyzw
mad r0.xyzw, r0.xxxx, r1.xyzw, r8.xyzw
movc o0.xyzw, cb3[0].wwww, r0.xyzw, r8.xyzw
ret 
// Approximately 539 instruction slots used
